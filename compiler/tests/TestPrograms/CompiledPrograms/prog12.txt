import torch
import torch.nn as nn

class Network(nn.Module):
    def __init__(self):
        super(Network, self).__init__()
        # Define layers
        self.conv2d0 = nn.Conv2d(3, 64, 11, stride=4, padding=2)
        self.relu0 = nn.ReLU()
        self.maxpool2d0 = nn.MaxPool2d(3, stride=2)
        self.conv2d1 = nn.Conv2d(64, 192, 5, padding=2)
        self.relu1 = nn.ReLU()
        self.maxpool2d1 = nn.MaxPool2d(3, stride=2)
        self.conv2d2 = nn.Conv2d(192, 384, 3, padding=1)
        self.relu2 = nn.ReLU()
        self.conv2d3 = nn.Conv2d(384, 256, 3, padding=1)
        self.relu3 = nn.ReLU()
        self.conv2d4 = nn.Conv2d(256, 256, 3, padding=1)
        self.relu4 = nn.ReLU()
        self.maxpool2d2 = nn.MaxPool2d(3, stride=2)
        self.flatten0 = nn.Flatten()
        self.dropout0 = nn.Dropout(p=0.5)
        self.linear0 = nn.Linear(256 * 6 * 6, 4096)
        self.relu5 = nn.ReLU()
        self.dropout0 = nn.Dropout(p=0.5)
        self.linear1 = nn.Linear(4096, 4096)
        self.relu6 = nn.ReLU()
        self.linear2 = nn.Linear(4096, 10)

    def forward(self, x):
        x = self.conv2d0(x)
        x = self.relu0(x)
        x = self.maxpool2d0(x)
        x = self.conv2d1(x)
        x = self.relu1(x)
        x = self.maxpool2d1(x)
        x = self.conv2d2(x)
        x = self.relu2(x)
        x = self.conv2d3(x)
        x = self.relu3(x)
        x = self.conv2d4(x)
        x = self.relu4(x)
        x = self.maxpool2d2(x)
        x = self.flatten0(x)
        x = self.dropout0(x)
        x = self.linear0(x)
        x = self.relu5(x)
        x = self.dropout0(x)
        x = self.linear1(x)
        x = self.relu6(x)
        x = self.linear2(x)
        return x